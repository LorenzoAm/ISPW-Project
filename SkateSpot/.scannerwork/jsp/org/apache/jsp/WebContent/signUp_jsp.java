/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2021-02-07 11:07:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WebContent;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import logic.beans.SignUpBean;
import logic.controllers.SignUpController;

public final class signUp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("logic.controllers.SignUpController");
    _jspx_imports_classes.add("java.time.ZoneId");
    _jspx_imports_classes.add("logic.beans.SignUpBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("   \n\n\n\n\n\n\n\n");
      logic.beans.SignUpBean signUpBean = null;
      signUpBean = (logic.beans.SignUpBean) _jspx_page_context.getAttribute("signUpBean", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (signUpBean == null){
        try {
          signUpBean = (logic.beans.SignUpBean) java.beans.Beans.instantiate(this.getClass().getClassLoader(), "logic.beans.SignUpBean");
        } catch (java.lang.ClassNotFoundException exc) {
          throw new InstantiationException(exc.getMessage());
        } catch (java.lang.Exception exc) {
          throw new javax.servlet.ServletException("Cannot create bean of class " + "logic.beans.SignUpBean", exc);
        }
        _jspx_page_context.setAttribute("signUpBean", signUpBean, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("signUpBean"), request);
      out.write("\n    \n<!DOCTYPE html>\n<html lang=\"it\">\n<head>\n<meta charset=\"ISO-8859-1\">\n<title>Sign Up</title>\n</head>\n<body>\n\t");

 	if(request.getParameter("signUp")!=null)
 	{
 		SignUpBean bean= new SignUpBean(request.getParameter("name"),request.getParameter("surname"),request.getParameter("username"),request.getParameter("email"),request.getParameter("password"),request.getParameter("confirmPassword"));
 		if(request.getParameter("data")!=null)
 		{
 			String data = request.getParameter("data");
 			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
 			Date realDate = dateFormat.parse(data);
 			LocalDate dateInLocalType=realDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
 			bean.control(dateInLocalType,request.getParameter("gender"),request.getParameter("typeOfAccount"));
 			
 		}
 		if(bean.check())
 		{
 			SignUpController.getInstance().signUp(bean);
 		
      out.write("\n \t\t\t");
      if (true) {
        _jspx_page_context.forward("index.jsp");
        return;
      }
      out.write("\n \t\t");
 
 		}
 		else
 		{
 			
      out.write("\n \t\t\t\t<p>entered data aren't correct</p>\n \t\t\t");

 		}
 	}
 
      out.write("\n\t<div>\n\t\t<h1 id = \"title\" >SkateSpot</h1>\n\t\t<a href=\"index.jsp\">\n\t\t\t<img src=\"images/home_icon.png\" alt=\"Home\"/>\n\t\t</a>\n\t</div>\n\t\n\t<div>\n\t\t<h1>Create a new account</h1> <br>\n\t\t<form action=\"\" method=\"get\">\n  \t\t\t<label >Name: </label>\n  \t\t\t<input type=\"text\" id=\"name\" name=\"name\" required>\n  \t\t\t<label>Surname: </label>\n  \t\t\t<input type=\"text\" id=\"surname\" name=\"surname\" required><br><br>\n  \t\t\t<label >Username: </label>\n  \t\t\t<input type=\"text\" id=\"username\" name=\"username\" required><br><br>\n  \t\t\t<label >Email: </label>\n  \t\t\t<input type=\"text\" id=\"email\" name=\"email\" required><br><br>\n  \t\t\t<label >New password: </label>\n  \t\t\t<input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n  \t\t\t<label >Confirm password: </label>\n  \t\t\t<input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required><br><br>\n  \t\t\t<label >Date of birth: </label>\n  \t\t\t<input type=\"date\" id=\"data\" name=\"data\" required><br><br>\n  \t\t\t<label>Gender:</label><br>\n  \t\t\t<input type=\"radio\" id=\"maleButton\" name=\"gender\" value=\"M\" required>\n");
      out.write("  \t\t\t<label>Male</label><br>\n  \t\t\t<input type=\"radio\" id=\"femaleButton\" name=\"gender\" value=\"F\">\n  \t\t\t<label>Female</label><br><br>\n  \t\t\t<label>Type of account :</label> <br>\n  \t\t\t<input type=\"radio\" id=\"skaterButton\" name=\"typeOfAccount\" value=\"Skater\" required>\n  \t\t\t<label>Skater(free)</label><br>\n  \t\t\t<input type=\"radio\" id=\"ownerButton\" name=\"typeOfAccount\" value=\"Owner\">\n  \t\t\t<label>Shop owner</label><br><br><br>\n  \t\t\t<input type=\"submit\" value=\"Sign up\" name=\"signUp\">\n  \t\t\t<input type=\"reset\" value=\"reset all\">\n\t\t</form>\n\t</div>\n\n</body>\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
